import camion.*
import cosas.*

describe "Camiones" {

  method initialize(){
    camion.cargar(bumblebee)
    bumblebee.transformacion(auto)
    camion.cargar(ladrillos)

  }
  test "se carga en el camion a bumblebee y paquete de ladrillos" {
    

    assert.equals(#{bumblebee,ladrillos}, camion.cosas())
    }

    test "se quiere descargar  el paquete de ladrillos  del camion (bumblebee , paquete de ladrillos)" {
      
      camion.descargar(ladrillos)

      assert.equals(#{bumblebee}, camion.cosas())
    }

    test "verifica si el peso de cada cosa de la carga es par"{
      assert.that(camion.todoPesoPar())
    }

    test "vereficia el peso total del camion  tara + (bumblebee,paquete de ladrillos)" {
      
      assert.equals(1800, camion.pesoTotal())
    }
    test "verifica si el camion esta excedido de peso" {
      assert.notThat(camion.excedidoDePeso())
    }

    test "devuelve los objetos  de la carga que superan el nivel de peligrosidad " {
      
      assert.equals(#{}, camion.objetosQueSuperanPeligrosidad(100))
    }

    test "devuelve las cosas de la carga que superan la peligrosidad de la cosa dada" {
      
      assert.equals(#{}, camion.objetosMasPeligrososQue(bumblebee))
    }

    test "verifica si el camion puede circular en la ruta" {

      assert.that(camion.puedeCircularEnRuta(50))
      
    }
}

describe "cosas que se pueden cargar en el camion" {
  test "knight rider pesa 500 kilos y su peligrosidad es de 10" {
    
    assert.equals(500, knightRider.peso())
    assert.equals(10, knightRider.nivelPeligrosidad())
  }

  test "bumblebee pesa 800 kilos y su peligrosidad es de 15 de esta tranformado en auto y 30 en robot" {
    assert.equals(800, bumblebee.peso())
    assert.equals(15, bumblebee.nivelPeligrosidad())

    bumblebee.transformacion(robot)

    assert.equals(30, bumblebee.nivelPeligrosidad())
  }

  test "el paquete de ladrillos pesa  2 kilos por cada uno de ellos, este paquete tiene 10 ,  pesa 20 kilos" {
    ladrillos.cantLadrillos(10)
    
    assert.equals(20, ladrillos.peso())
  }

  test "la arena a granel pesa 100 kg y su peligrosidad es de 1" {
    arenaGranel.peso(100)

    assert.equals(100, arenaGranel.peso())
    assert.equals(1, arenaGranel.nivelPeligrosidad())
  }

  test "la bateria antiaerea pesa 300 kilos si esta con los misiles cargados sino 200, con peligrosidad 100 si tiene misiles sino 0" {
    bateriaAntiaerea.cargarMisiles()

    assert.equals(300, bateriaAntiaerea.peso())
    assert.equals(100, bateriaAntiaerea.nivelPeligrosidad())

    bateriaAntiaerea.descargarMisiles()

    assert.equals(200, bateriaAntiaerea.peso())
    assert.equals(0, bateriaAntiaerea.nivelPeligrosidad())
  }

  test "el contenedor portuario tiene 4 LADRILLOS  y una bateriaAntiaerea con Misiles"{
    ladrillos.cantLadrillos(4)
    contenedor.cargar(ladrillos)
    bateriaAntiaerea.cargarMisiles()
    contenedor.cargar(bateriaAntiaerea)

    assert.equals(408, contenedor.peso())
    assert.equals(100, contenedor.nivelPeligrosidad())
  } 

  test "los residuos radioactivos  su peso es variable (100) y su peligrosidad es de 200" {
    
    residuos.peso(100)

    assert.equals(100, residuos.peso())
    assert.equals(200, residuos.nivelPeligrosidad())
  }
  
  test "el embalaje de seguridad tiene el mismo peso del objetos que proteja  y si peligrosidad es la mitad, knigth rider 500 peligrosidad 5" {
    embalaje.embalar(knightRider)

    assert.equals(500, embalaje.peso())
    assert.equals(5, embalaje.nivelPeligrosidad())
  }

}

describe "agregados al camion" {
  test "indica si el peso de alguna cosa de la carga que tiene el camion esta entre el intervalo" {
    camion.cargar(knightRider)
    camion.cargar(bumblebee)
    
    assert.that(camion.tieneAlgoQuePesaEntre(300,500))
  }

  test "devuelve la cosa mas pesada de la carga del camion" {
    camion.cargar(knightRider)
    camion.cargar(bumblebee)

    assert.equals(bumblebee, camion.cosaMasPesada())
    
  }

  test "devuelve una lista con los pesos de las cosas de la carga del camion" {

    camion.cargar(bumblebee)
    camion.cargar(knightRider)

    assert.equals([800,500], camion.pesos())
    
  }
}